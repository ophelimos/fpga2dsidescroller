{\rtf1\ansi\deff1\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Luxi Sans;}{\f1\froman\fprq2\fcharset0 Times New Roman;}{\f2\fswiss\fprq2\fcharset0 Arial{\*\falt Helvetica};}{\f3\froman\fprq2\fcharset0 Times New Roman;}{\f4\froman\fprq2\fcharset0 Luxi Sans;}{\f5\froman\fprq0\fcharset0 Times{\*\falt Times New Roman};}{\f6\froman\fprq2\fcharset2 Symbol;}{\f7\fmodern\fprq1\fcharset0 Courier New;}{\f8\fnil\fprq2\fcharset2 Wingdings;}{\f9\fnil\fprq0\fcharset128 StarSymbol{\*\falt Arial Unicode MS};}{\f10\fswiss\fprq2\fcharset2 Luxi Sans;}{\f11\froman\fprq2\fcharset128 Times New Roman;}{\f12\fnil\fprq0\fcharset0 Tahoma;}}
{\colortbl;\red0\green0\blue0;\red128\green128\blue128;}
{\stylesheet{\s1\rtlch\afs24\lang255\ltrch\dbch\langfe255\hich\fs24\lang1033\loch\fs24\lang1033\snext1 Normal;}
{\s2\sb240\sa120\keepn\rtlch\af1\afs28\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs28\lang1033\loch\f1\fs28\lang1033\sbasedon7\snext3 Heading;}
{\s3\sa120\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1033\loch\f1\fs24\lang1033\sbasedon7\snext3 Body Text;}
{\s4\rtlch\afs24\lang255\ltrch\dbch\langfe255\hich\fs24\lang1033\loch\fs24\lang1033\sbasedon3\snext4 List;}
{\s5\sb120\sa120\rtlch\af12\afs24\lang255\ai\ltrch\dbch\langfe255\hich\fs24\lang1033\i\loch\fs24\lang1033\i\sbasedon1\snext5 caption;}
{\s6\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1033\loch\f1\fs24\lang1033\sbasedon7\snext6 Index;}
{\s7\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033\sbasedon1\snext7 Normal;}
{\s8\sb120\sa120\rtlch\af1\afs24\lang255\ai\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1033\i\loch\f1\fs24\lang1033\i\sbasedon7\snext8 caption;}
{\s9\rtlch\afs32\lang255\ab\ltrch\dbch\langfe255\hich\fs32\lang1033\b\loch\fs32\lang1033\b\sbasedon2\snext3{\*\soutlvl0} heading 1;}
{\s10\sb240\sa60\keepn\rtlch\af5\afs32\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs32\lang1033\b\loch\f5\fs32\lang1033\b\sbasedon7\snext7 heading 2;}
{\s11\sb240\sa60\keepn\rtlch\af5\afs32\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs32\lang1033\b\loch\f5\fs32\lang1033\b\sbasedon7\snext7 heading 3;}
{\s12\sb240\sa60\keepn\rtlch\af5\afs24\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs24\lang1033\b\loch\f5\fs24\lang1033\b\sbasedon7\snext7 heading 4;}
{\*\cs14\cf0\rtlch\af6\afs24\lang255\ltrch\dbch\af6\langfe1033\hich\f6\fs24\lang1033\loch\f6\fs24\lang1033 RTF_Num 2 1;}
{\*\cs15\cf0\rtlch\af7\afs24\lang255\ltrch\dbch\af7\langfe1033\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 RTF_Num 2 2;}
{\*\cs16\cf0\rtlch\af8\afs24\lang255\ltrch\dbch\af8\langfe1033\hich\f8\fs24\lang1033\loch\f8\fs24\lang1033 RTF_Num 2 3;}
{\*\cs17\cf0\rtlch\af6\afs24\lang255\ltrch\dbch\af6\langfe1033\hich\f6\fs24\lang1033\loch\f6\fs24\lang1033 RTF_Num 2 4;}
{\*\cs18\cf0\rtlch\af7\afs24\lang255\ltrch\dbch\af7\langfe1033\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 RTF_Num 2 5;}
{\*\cs19\cf0\rtlch\af8\afs24\lang255\ltrch\dbch\af8\langfe1033\hich\f8\fs24\lang1033\loch\f8\fs24\lang1033 RTF_Num 2 6;}
{\*\cs20\cf0\rtlch\af6\afs24\lang255\ltrch\dbch\af6\langfe1033\hich\f6\fs24\lang1033\loch\f6\fs24\lang1033 RTF_Num 2 7;}
{\*\cs21\cf0\rtlch\af7\afs24\lang255\ltrch\dbch\af7\langfe1033\hich\f7\fs24\lang1033\loch\f7\fs24\lang1033 RTF_Num 2 8;}
{\*\cs22\cf0\rtlch\af8\afs24\lang255\ltrch\dbch\af8\langfe1033\hich\f8\fs24\lang1033\loch\f8\fs24\lang1033 RTF_Num 2 9;}
{\*\cs23\cf0\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe1033\hich\f1\fs24\lang1033\loch\f1\fs24\lang1033 Default Paragraph Font;}
{\*\cs24\cf0\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang0\loch\f1\fs24\lang0 Absatz-Standardschriftart;}
{\*\cs25\cf0\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang0\loch\f1\fs24\lang0 Numbering Symbols;}
{\*\cs26\cf0\rtlch\af1\afs18\lang255\ltrch\dbch\af9\langfe255\hich\f9\fs18\lang0\loch\f9\fs18\lang0 Bullet Symbols;}
}
{\info{\creatim\yr2008\mo12\dy2\hr12\min50}{\revtim\yr2008\mo12\dy2\hr12\min59}{\printim\yr1601\mo1\dy1\hr0\min0}{\comment StarWriter}{\vern6800}}\deftab709
{\*\pgdsctbl
{\pgdsc0\pgdscuse195\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Standard;}}
{\*\pgdscno0}\paperh15840\paperw12240\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pard\plain \ltrpar\s3\sa120\ql\rtlch\af2\afs20\lang255\ltrch\dbch\af2\langfe255\hich\f2\fs20\lang1033\loch\f2\fs20\lang1033 {\rtlch \ltrch\loch\f2\fs20\lang1033\i0\b0 The report should be a maximum 5 pages; not including schematics and Verilog Code. In addition, the report should contain these Sections: \line 1. Introduction \line \'96 English description of goals of project; motivation \line \line 2. The Design \line \'96 Block Diagram of the major 
parts, and of sub-parts as necessary \line \'96 English description of the function of each part \line \'96 Be sure to start from top and go down. (not bottom up!) \line \line 3. Report on Success \line \'96 Did it work? Show pictures or describe \line \'96 For parts that didn\'92t work \'96 speculate a
s to why \line \line 4. What would you do differently if you were going to start all over again - i.e. what did you learn? \line \line Appendix: All Verilog Code and Schematics}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af2\afs20\lang255\ltrch\dbch\af2\langfe255\hich\f2\fs20\lang1033\loch\f2\fs20\lang1033 
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af2\afs20\lang255\ltrch\dbch\af2\langfe255\hich\f2\fs20\lang1033\loch\f2\fs20\lang1033 {\rtlch \ltrch\loch\f2\fs20\lang1033\i0\b0 --------}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af2\afs24\lang255\ltrch\dbch\af2\langfe255\hich\f5\fs32\lang1033\b\loch\f5\fs32\lang1033\b {\rtlch \ltrch\loch\f5\fs32\lang1033\i0\b 1  Introduction:}
\par \pard\plain \ltrpar\s7\sl240\slmult1\qj\sb60\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 
\par \pard\plain \ltrpar\s7\ql\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 {\rtlch \ltrch\loch\f4\fs24\lang1033\i0\b0 The motivation for our project was to recreate a rendition of the classic Super Mario Brothers games.  This involves a two-dimensional scrolling-level based game, where a character traverses a level, avoiding obstacles, with the purpose of reaching the end
. A score is calculated based on the time taken to complete the level. There may also be some in-game modifiers, such as coins, which can be picked up while playing the level to increase the score. To make the gameplay more challenging, enemies also popula
te the level, and must be avoided as touching one of them means losing the game.}
\par \pard\plain \ltrpar\s7\ql\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 
\par \pard\plain \ltrpar\s7\ql\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 {\rtlch \ltrch\loch\f4\fs24\lang1033\i0\b0 For our ECE 241 project, we wanted to implement this sort of game on the DE2 board. There were two big reasons for this: first, Nintendo\'92s Super Mario was a game that we had both enjoyed as kids, and secondly, it conformed well to the spiral development mo
del, allowing more complicated bits to be built on a baseline.}
\par \pard\plain \ltrpar\s7\ql\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 
\par \pard\plain \ltrpar\s7\ql\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 {\rtlch \ltrch\loch\f4\fs24\lang1033\i0\b0 We realized at the beginning that this was an ambitious project, and that we wouldn't be able to completely replicate all of the games features because of our three week development time. Thus, we decided upon the various elements we wanted to create (and 
those to exclude), and came up with some milestones and a rough timeline. We identified three major subgoals, each building on top of the previous: the creation of a tile-based side-scrolling background, the creation of a character able to run and jump wit
hin this tile-based world, and the creation of enemies and items this character would be able to interact with.}
\par \pard\plain \ltrpar\s7\ql\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 
\par \pard\plain \ltrpar\s7\ql\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 {\rtlch \ltrch\loch\f4\fs24\lang1033\i0\b0 Unfortunately, due to time constraints and unforeseen bugs, while a working tile-based side-scrolling background was finished, the character's ability to interact with the tile-based world was only partially completed, and items and enemies weren't at all.
 As a result, during this report we will explain two things: what the circuit as presented is able to do, and what the circuit was intended to do.}
\par \pard\plain \ltrpar\s10\sl240\slmult1\sb240\sa60\keepn\ql\rtlch\af5\afs32\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs32\lang1033\b\loch\f5\fs32\lang1033\b {\rtlch \ltrch\loch\f5\fs32\lang1033\i0\b 2  The Design:}
\par \pard\plain \ltrpar\s11\sl240\slmult1\sb240\sa60\keepn\ql\rtlch\af5\afs32\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs32\lang1033\b\loch\f5\fs32\lang1033\b {\rtlch \ltrch\loch\f5\fs32\lang1033\i0\b 2.1  main_state_machine:}
\par \pard\plain \ltrpar\s7\sl240\slmult1\qj\sb60\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 {\rtlch \ltrch\loch\f4\fs24\lang1033\i0\b0 Our base module, main_state_machine controls program flow by means of a state machine. Using a simple enable-done handshake, it sequentially passes control to drawBackground, drawSprite, detectCollision, and the movement modules, in a continuous loop. As w
ell, to slow down execution, it contains a wait state, which ensures that each loop takes no less than 1/60th of a second. Although not implemented in the final design, it was also intended to travel to loss and ending states, where it would stay until res
et.}
\par \pard\plain \ltrpar\s11\sl240\slmult1\sb240\sa60\keepn\ql\rtlch\af5\afs32\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs32\lang1033\b\loch\f5\fs32\lang1033\b {\rtlch \ltrch\loch\f5\fs32\lang1033\i0\b 2.2  drawBackground}
\par \pard\plain \ltrpar\s7\sl240\slmult1\qj\sb60\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 {\rtlch \ltrch\loch\f4\fs24\lang1033\i0\b0 DrawBackground sequentially reads in a pixel from the levelmap, tells drawTile to draw the corresponding tile on the screen, and then advances to the next pixel after drawTile has reported success. After the entire screen has been drawn, it raises the done
 flag, and waits until it is enabled again. We simulate movement by changing the offset value at which drawBackground begins reading from the levelmap. Although we intended to implement per-pixel offsets, this was still buggy at time of presentation, and c
urrently, the background moves one tile at a time.}
\par \pard\plain \ltrpar\s12\sl240\slmult1\sb240\sa60\keepn\ql\rtlch\af5\afs24\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs24\lang1033\b\loch\f5\fs24\lang1033\b {\rtlch \ltrch\loch\f5\fs24\lang1033\i0\b 2.2.1  drawTile}
\par \pard\plain \ltrpar\s7\sl240\slmult1\qj\sb60\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 {\rtlch \ltrch\loch\f4\fs24\lang1033\i0\b0 Once enabled, drawTile reads in 9-bit (RGB333) color values and outputs them to the vga adapter, drawing an 8x8 tile starting from the position it was given by drawBackground. Since all the tiles are stored within a single memory file, a specific tile is a
ccessed by offsetting the memory counter according to the tile code sent by drawBackground.}
\par \pard\plain \ltrpar\s11\sl240\slmult1\sb240\sa60\keepn\ql\rtlch\af5\afs32\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs32\lang1033\b\loch\f5\fs32\lang1033\b {\rtlch \ltrch\loch\f5\fs32\lang1033\i0\b 2.3  drawSprite}
\par \pard\plain \ltrpar\s7\sl240\slmult1\qj\sb60\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 {\rtlch \ltrch\loch\f4\fs24\lang1033\i0\b0 DrawSprite, following the pattern of our other draw modules, would read in a value from memory and draw it on the screen, painting on top of the background. DrawSprite differed however in that it was pixel-based, not tile-based, and would draw an up to 32x
32 pixel sprite anywhere on the screen. A specific animation step was decided, surprise surprise, by offsetting the memory counter with an external input.}
\par \pard\plain \ltrpar\s12\sl240\slmult1\sb240\sa60\keepn\ql\rtlch\af5\afs24\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs24\lang1033\b\loch\f5\fs24\lang1033\b {\rtlch \ltrch\loch\f5\fs24\lang1033\i0\b 2.3.1  spriteMem}
\par \pard\plain \ltrpar\s7\sl240\slmult1\qj\sb60\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 {\rtlch \ltrch\loch\f4\fs24\lang1033\i0\b0 DrawSprite was originally designed to be capable of drawing up to 4 different 32x32 pixel sprites, each with 4 animation steps. Although, due to time constraints, we only implemented one 8x16 character sprite, spriteMem is a memory abstraction layer which 
ideally would be capable of pulling the appropriate image from memory (again using offsets), and sending it to drawSprite.}
\par \pard\plain \ltrpar\s11\sl240\slmult1\sb240\sa60\keepn\ql\rtlch\af5\afs32\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs32\lang1033\b\loch\f5\fs32\lang1033\b {\rtlch \ltrch\loch\f5\fs32\lang1033\i0\b 2.4  drawScreen}
\par \pard\plain \ltrpar\s7\sl240\slmult1\qj\sb60\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 {\rtlch \ltrch\loch\f4\fs24\lang1033\i0\b0 Not present in the final design, drawScreen is a widening of the drawTile module, allowing the entire screen at once to be drawn from memory, for use in implementing customized beginning, death, and ending screens.}
\par \pard\plain \ltrpar\s11\sl240\slmult1\sb240\sa60\keepn\ql\rtlch\af5\afs32\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs32\lang1033\b\loch\f5\fs32\lang1033\b {\rtlch \ltrch\loch\f5\fs32\lang1033\i0\b 2.5  Movement}
\par \pard\plain \ltrpar\s12\sl240\slmult1\sb240\sa60\keepn\ql\rtlch\af5\afs24\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs24\lang1033\b\loch\f5\fs24\lang1033\b {\rtlch \ltrch\loch\f5\fs24\lang1033\i0\b 2.5.1  detectCollision}
\par \pard\plain \ltrpar\s7\sl240\slmult1\qj\sb60\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 {\rtlch \ltrch\loch\f4\fs24\lang1033\i0\b0 To prevent movement in blocked directions, detectCollision would take in the current character position, read in adjacent tiles from the tilemap, and use that to determine whether or not the character would be allowed to move in a certain direction. As imp
lemented, all tiles except the sky tile caused a block signal, but this is easily modifiable, allowing different types of non-blocking tiles to be added as necessary.}
\par \pard\plain \ltrpar\s12\sl240\slmult1\sb240\sa60\keepn\ql\rtlch\af5\afs24\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs24\lang1033\b\loch\f5\fs24\lang1033\b {\rtlch \ltrch\loch\f5\fs24\lang1033\i0\b 2.5.2  levelMovement}
\par \pard\plain \ltrpar\s7\sl240\slmult1\qj\sb60\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 {\rtlch \ltrch\loch\f4\fs24\lang1033\i0\b0 Not a separate module, but instead a section within main_state_machine, we implemented an up-down counter that, in response to push keys, would either increment or decrement, changing the background offset, and in essence, move the character horizontally a
cross the level.}
\par \pard\plain \ltrpar\s12\sl240\slmult1\sb240\sa60\keepn\ql\rtlch\af5\afs24\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs24\lang1033\b\loch\f5\fs24\lang1033\b {\rtlch \ltrch\loch\f5\fs24\lang1033\i0\b 2.5.3  characterMovement}
\par \pard\plain \ltrpar\s7\sl240\slmult1\qj\sb60\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 {\rtlch \ltrch\loch\f4\fs24\lang1033\i0\b0 A source of great frustration, characterMovement was intended to control the falling and jumping activities of the character. It was intended that a register would hold the y-position of the character, and would be constantly decremented to simulate fallin
g, unless of course the character was blocked beneath. Jumping would consist of adding the output of a time-decrementing counter to the y-position register. Unfortunately, characterMovement was still buggy when we ran out of time, and instead, up-down char
acter movement was implemented by an updown counter within main_state_machine, just like levelMovement.}
\par \pard\plain \ltrpar\s11\sl240\slmult1\sb240\sa60\keepn\ql\rtlch\af5\afs32\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs32\lang1033\b\loch\f5\fs32\lang1033\b {\rtlch \ltrch\loch\f5\fs32\lang1033\i0\b 2.6  Scoring}
\par \pard\plain \ltrpar\s7\sl240\slmult1\qj\sb60\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang1033\loch\f4\fs24\lang1033 {\rtlch \ltrch\loch\f4\fs24\lang1033\i0\b0 Scoring, as implemented, is a second-by-second counter that outputs a decimal number to the hex displays. Since there is no ending to the game as implemented, the counter effectively counts up indefinitely from each reset.}
\par \pard\plain \ltrpar\s10\sl240\slmult1\sb240\sa60\keepn\ql\rtlch\af5\afs32\lang255\ab\ltrch\dbch\af5\langfe255\hich\f5\fs32\lang1033\b\loch\f5\fs32\lang1033\b {\rtlch \ltrch\loch\f5\fs32\lang1033\i0\b 2.7  Simplified Block Diagram:}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs20\lang255\ltrch\dbch\af1\langfe1033\hich\f1\fs20\lang1033\loch\f1\fs20\lang1033 {\rtlch \ltrch\loch  }
\par \pard\plain \ltrpar\s10\sl240\slmult1\sb240\sa60\keepn\ql {\rtlch \ltrch\loch\f1\fs32\lang1033\i0\b 3  Report on Success:}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe1033\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs32\lang255\ab\ltrch\dbch\af1\langfe1033\hich\f11\fs32\lang1033\b\loch\f11\fs32\lang1033\b {\rtlch \ltrch\loch\f11\fs32\lang1033\i0\b 3.1 Level Drawing and Scrolling}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe1033\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 {\rtlch \ltrch\loch\af\f10\fs24\lang1033\i0\b0 We were able to complete this fundamental project milestone. Since this code would form the backbone of our project, it was important that level drawing and scrolling functioned properly and without bugs.  We were able to load the level tilemap from memory
, and based on a current position, draw the appropriate tiles on the screen. By pressing the keys on the DE2, it  was possible to scroll the level tile by tile either to the left or right, simulating character movement.}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe1033\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 {\rtlch \ltrch\loch\af\f10\fs24\lang1033\i0\b0 A possible next step in terms of level scrolling was to scroll pixel by pixel instead of by tile (which meant that the level incremented at 8 pixels at a time). This would have improved the appearance of the scrolling animation, and also given the level a 
higher physical resolution in terms of the characters position. The code written for this function did not perform correctly. We speculate that this is due to incompatibilities between drawing the screen and scrolling it pixel by pixel.}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs32\lang255\ab\ltrch\dbch\af1\langfe1033\hich\f11\fs32\lang1033\b\loch\f11\fs32\lang1033\b {\rtlch \ltrch\loch\f11\fs32\lang1033\i0\b 3.2 Character Movement and Level Traversal}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe1033\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 {\rtlch \ltrch\loch\af\f10\fs24\lang1033\i0\b0 The next milestone in our timeline was to allow character movement and level traversal. This meant the ability to jump over obstacles, move across the level, and be subject to an imposed gravity. In addition, it was necessary to draw the character on the s
creen.}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe1033\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 {\rtlch \ltrch\loch\af\f10\fs24\lang1033\i0\b0 The first two tasks were achieved, however we couldn't get gravity modeling to work. Thus, the character was able to move across the screen in all four directions, but wouldn't fall to the ground after jumping. This was likely to be non-functioning because
 of a faulty state machine which was to control the character's Y position.}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs32\lang255\ab\ltrch\dbch\af1\langfe1033\hich\f11\fs32\lang1033\b\loch\f11\fs32\lang1033\b {\rtlch \ltrch\loch\f11\fs32\lang1033\i0\b 3.3 Enemies, Items, and other Fancy Features}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe1033\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 {\rtlch \ltrch\loch\af\f10\fs24\lang1033\i0\b0 Essentially, we were able to write the code for most of the features listed in the milestones, but the functionality was untested and ultimately we ran out of time to debug the design to get it working.}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe1033\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 {\rtlch \ltrch\loch\af\f10\fs24\lang1033\i0\b0 Of the features that we planned for the third milestone, we were only able to get character animation working. That is, the character could be facing two directions, and has two animation states: jumping and standing. Pressing the left and right keys deter
mine the direction the character is facing, and a jumping animation is decided by whether or not the character is standing on a tile or not.}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe1033\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 {\rtlch \ltrch\loch\af\f10\fs24\lang1033\i0\b0 We also had planned introductory screens, as well as win or lose screens to show at the start and end of the game. Unfortunately, despite the fact we had screens and circuits capable of doing this, our focus was implementing character movement, and we simp
ly ran out of time.  Although merging these functions should have been trivial, it simply was another casualty of the time crunch.}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe1033\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs32\lang255\ab\ltrch\dbch\af1\langfe1033\hich\f11\fs32\lang1033\b\loch\f11\fs32\lang1033\b {\rtlch \ltrch\loch\f11\fs32\lang1033\i0\b 4  Conclusions}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe1033\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 {\rtlch \ltrch\loch\af\f10\fs24\lang1033\i0\b0 What would we do differently next time?}
\par \pard\plain \ltrpar\s3\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe1033\hich\f10\fs24\lang1033\loch\f10\fs24\lang1033 
\par }
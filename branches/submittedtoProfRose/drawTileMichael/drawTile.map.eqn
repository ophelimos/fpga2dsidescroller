-- Copyright (C) 1991-2008 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.
--D3_Q[0] is nBitRegister:AddressReg|Q[0]
D3_Q[0] = DFFEAS(D3L3, Clock,  ,  ,  ,  ,  , A1L53,  );


--D3_Q[1] is nBitRegister:AddressReg|Q[1]
D3_Q[1] = DFFEAS(D3L6, Clock,  ,  ,  ,  ,  , A1L53,  );


--D3_Q[2] is nBitRegister:AddressReg|Q[2]
D3_Q[2] = DFFEAS(D3L9, Clock,  ,  ,  ,  ,  , A1L53,  );


--D3_Q[3] is nBitRegister:AddressReg|Q[3]
D3_Q[3] = DFFEAS(D3L12, Clock,  ,  ,  ,  ,  , A1L53,  );


--D3_Q[4] is nBitRegister:AddressReg|Q[4]
D3_Q[4] = DFFEAS(D3L15, Clock,  ,  ,  ,  ,  , A1L53,  );


--D3_Q[5] is nBitRegister:AddressReg|Q[5]
D3_Q[5] = DFFEAS(D3L18, Clock,  ,  ,  ,  ,  , A1L53,  );


--D3_Q[6] is nBitRegister:AddressReg|Q[6]
D3_Q[6] = DFFEAS(D3L21, Clock,  ,  ,  ,  ,  , A1L53,  );


--G1L1 is memCount:AddressCounter|lpm_add_sub:lpm_add_sub_component|add_sub_llh:auto_generated|result[6]~20
G1L1 = D3_Q[6] & (TileSel[0] $ VCC) # !D3_Q[6] & TileSel[0] & VCC;

--G1L2 is memCount:AddressCounter|lpm_add_sub:lpm_add_sub_component|add_sub_llh:auto_generated|result[6]~21
G1L2 = CARRY(D3_Q[6] & TileSel[0]);


--G1L3 is memCount:AddressCounter|lpm_add_sub:lpm_add_sub_component|add_sub_llh:auto_generated|result[7]~22
G1L3 = TileSel[1] & !G1L2 # !TileSel[1] & (G1L2 # GND);

--G1L4 is memCount:AddressCounter|lpm_add_sub:lpm_add_sub_component|add_sub_llh:auto_generated|result[7]~23
G1L4 = CARRY(!G1L2 # !TileSel[1]);


--G1L5 is memCount:AddressCounter|lpm_add_sub:lpm_add_sub_component|add_sub_llh:auto_generated|result[8]~24
G1L5 = TileSel[2] & (G1L4 $ GND) # !TileSel[2] & !G1L4 & VCC;

--G1L6 is memCount:AddressCounter|lpm_add_sub:lpm_add_sub_component|add_sub_llh:auto_generated|result[8]~25
G1L6 = CARRY(TileSel[2] & !G1L4);


--G1L7 is memCount:AddressCounter|lpm_add_sub:lpm_add_sub_component|add_sub_llh:auto_generated|result[9]~26
G1L7 = TileSel[3] $ G1L6;


--D1_Q[0] is nBitRegister:XOffsetReg|Q[0]
D1_Q[0] = DFFEAS(D1L3, Clock,  ,  ,  ,  ,  , A1L52,  );


--J2L1 is addx:XoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_big:auto_generated|op_1~104
J2L1 = D1_Q[0] & (Xin[0] $ VCC) # !D1_Q[0] & Xin[0] & VCC;

--J2L2 is addx:XoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_big:auto_generated|op_1~105
J2L2 = CARRY(D1_Q[0] & Xin[0]);


--D1_Q[1] is nBitRegister:XOffsetReg|Q[1]
D1_Q[1] = DFFEAS(D1L6, Clock,  ,  ,  ,  ,  , A1L52,  );


--J2L3 is addx:XoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_big:auto_generated|op_1~106
J2L3 = D1_Q[1] & (Xin[1] & J2L2 & VCC # !Xin[1] & !J2L2) # !D1_Q[1] & (Xin[1] & !J2L2 # !Xin[1] & (J2L2 # GND));

--J2L4 is addx:XoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_big:auto_generated|op_1~107
J2L4 = CARRY(D1_Q[1] & !Xin[1] & !J2L2 # !D1_Q[1] & (!J2L2 # !Xin[1]));


--D1_Q[2] is nBitRegister:XOffsetReg|Q[2]
D1_Q[2] = DFFEAS(D1L9, Clock,  ,  ,  ,  ,  , A1L52,  );


--J2L5 is addx:XoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_big:auto_generated|op_1~108
J2L5 = (D1_Q[2] $ Xin[2] $ !J2L4) # GND;

--J2L6 is addx:XoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_big:auto_generated|op_1~109
J2L6 = CARRY(D1_Q[2] & (Xin[2] # !J2L4) # !D1_Q[2] & Xin[2] & !J2L4);


--D1_Q[3] is nBitRegister:XOffsetReg|Q[3]
D1_Q[3] = DFFEAS(D1L12, Clock,  ,  ,  ,  ,  , A1L52,  );


--J2L7 is addx:XoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_big:auto_generated|op_1~110
J2L7 = D1_Q[3] & (Xin[3] & J2L6 & VCC # !Xin[3] & !J2L6) # !D1_Q[3] & (Xin[3] & !J2L6 # !Xin[3] & (J2L6 # GND));

--J2L8 is addx:XoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_big:auto_generated|op_1~111
J2L8 = CARRY(D1_Q[3] & !Xin[3] & !J2L6 # !D1_Q[3] & (!J2L6 # !Xin[3]));


--D1_Q[4] is nBitRegister:XOffsetReg|Q[4]
D1_Q[4] = DFFEAS(D1L15, Clock,  ,  ,  ,  ,  , A1L52,  );


--J2L9 is addx:XoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_big:auto_generated|op_1~112
J2L9 = (D1_Q[4] $ Xin[4] $ !J2L8) # GND;

--J2L10 is addx:XoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_big:auto_generated|op_1~113
J2L10 = CARRY(D1_Q[4] & (Xin[4] # !J2L8) # !D1_Q[4] & Xin[4] & !J2L8);


--D1_Q[5] is nBitRegister:XOffsetReg|Q[5]
D1_Q[5] = DFFEAS(D1L18, Clock,  ,  ,  ,  ,  , A1L52,  );


--J2L11 is addx:XoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_big:auto_generated|op_1~114
J2L11 = D1_Q[5] & (Xin[5] & J2L10 & VCC # !Xin[5] & !J2L10) # !D1_Q[5] & (Xin[5] & !J2L10 # !Xin[5] & (J2L10 # GND));

--J2L12 is addx:XoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_big:auto_generated|op_1~115
J2L12 = CARRY(D1_Q[5] & !Xin[5] & !J2L10 # !D1_Q[5] & (!J2L10 # !Xin[5]));


--D1_Q[6] is nBitRegister:XOffsetReg|Q[6]
D1_Q[6] = DFFEAS(D1L21, Clock,  ,  ,  ,  ,  , A1L52,  );


--J2L13 is addx:XoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_big:auto_generated|op_1~116
J2L13 = (D1_Q[6] $ Xin[6] $ !J2L12) # GND;

--J2L14 is addx:XoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_big:auto_generated|op_1~117
J2L14 = CARRY(D1_Q[6] & (Xin[6] # !J2L12) # !D1_Q[6] & Xin[6] & !J2L12);


--D1_Q[7] is nBitRegister:XOffsetReg|Q[7]
D1_Q[7] = DFFEAS(D1L24, Clock,  ,  ,  ,  ,  , A1L52,  );


--J2L15 is addx:XoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_big:auto_generated|op_1~118
J2L15 = D1_Q[7] $ Xin[7] $ J2L14;


--D2_Q[0] is nBitRegister:YOffsetReg|Q[0]
D2_Q[0] = DFFEAS(D2L3, Clock,  ,  ,  ,  ,  , A1L53,  );


--H2L1 is addy:YoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_aig:auto_generated|op_1~91
H2L1 = D2_Q[0] & (Yin[0] $ VCC) # !D2_Q[0] & Yin[0] & VCC;

--H2L2 is addy:YoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_aig:auto_generated|op_1~92
H2L2 = CARRY(D2_Q[0] & Yin[0]);


--D2_Q[1] is nBitRegister:YOffsetReg|Q[1]
D2_Q[1] = DFFEAS(D2L6, Clock,  ,  ,  ,  ,  , A1L53,  );


--H2L3 is addy:YoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_aig:auto_generated|op_1~93
H2L3 = D2_Q[1] & (Yin[1] & H2L2 & VCC # !Yin[1] & !H2L2) # !D2_Q[1] & (Yin[1] & !H2L2 # !Yin[1] & (H2L2 # GND));

--H2L4 is addy:YoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_aig:auto_generated|op_1~94
H2L4 = CARRY(D2_Q[1] & !Yin[1] & !H2L2 # !D2_Q[1] & (!H2L2 # !Yin[1]));


--D2_Q[2] is nBitRegister:YOffsetReg|Q[2]
D2_Q[2] = DFFEAS(D2L9, Clock,  ,  ,  ,  ,  , A1L53,  );


--H2L5 is addy:YoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_aig:auto_generated|op_1~95
H2L5 = (D2_Q[2] $ Yin[2] $ !H2L4) # GND;

--H2L6 is addy:YoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_aig:auto_generated|op_1~96
H2L6 = CARRY(D2_Q[2] & (Yin[2] # !H2L4) # !D2_Q[2] & Yin[2] & !H2L4);


--D2_Q[3] is nBitRegister:YOffsetReg|Q[3]
D2_Q[3] = DFFEAS(D2L12, Clock,  ,  ,  ,  ,  , A1L53,  );


--H2L7 is addy:YoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_aig:auto_generated|op_1~97
H2L7 = D2_Q[3] & (Yin[3] & H2L6 & VCC # !Yin[3] & !H2L6) # !D2_Q[3] & (Yin[3] & !H2L6 # !Yin[3] & (H2L6 # GND));

--H2L8 is addy:YoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_aig:auto_generated|op_1~98
H2L8 = CARRY(D2_Q[3] & !Yin[3] & !H2L6 # !D2_Q[3] & (!H2L6 # !Yin[3]));


--D2_Q[4] is nBitRegister:YOffsetReg|Q[4]
D2_Q[4] = DFFEAS(D2L15, Clock,  ,  ,  ,  ,  , A1L53,  );


--H2L9 is addy:YoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_aig:auto_generated|op_1~99
H2L9 = (D2_Q[4] $ Yin[4] $ !H2L8) # GND;

--H2L10 is addy:YoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_aig:auto_generated|op_1~100
H2L10 = CARRY(D2_Q[4] & (Yin[4] # !H2L8) # !D2_Q[4] & Yin[4] & !H2L8);


--D2_Q[5] is nBitRegister:YOffsetReg|Q[5]
D2_Q[5] = DFFEAS(D2L18, Clock,  ,  ,  ,  ,  , A1L53,  );


--H2L11 is addy:YoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_aig:auto_generated|op_1~101
H2L11 = D2_Q[5] & (Yin[5] & H2L10 & VCC # !Yin[5] & !H2L10) # !D2_Q[5] & (Yin[5] & !H2L10 # !Yin[5] & (H2L10 # GND));

--H2L12 is addy:YoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_aig:auto_generated|op_1~102
H2L12 = CARRY(D2_Q[5] & !Yin[5] & !H2L10 # !D2_Q[5] & (!H2L10 # !Yin[5]));


--D2_Q[6] is nBitRegister:YOffsetReg|Q[6]
D2_Q[6] = DFFEAS(D2L21, Clock,  ,  ,  ,  ,  , A1L53,  );


--H2L13 is addy:YoutAdder|lpm_add_sub:lpm_add_sub_component|add_sub_aig:auto_generated|op_1~103
H2L13 = D2_Q[6] $ Yin[6] $ !H2L12;


--D3L3 is nBitRegister:AddressReg|Q[0]~107
D3L3 = D3_Q[0] & (EnableMemCounter $ VCC) # !D3_Q[0] & EnableMemCounter & VCC;

--D3L4 is nBitRegister:AddressReg|Q[0]~108
D3L4 = CARRY(D3_Q[0] & EnableMemCounter);


--D3L6 is nBitRegister:AddressReg|Q[1]~109
D3L6 = D3_Q[1] & !D3L4 # !D3_Q[1] & (D3L4 # GND);

--D3L7 is nBitRegister:AddressReg|Q[1]~110
D3L7 = CARRY(!D3L4 # !D3_Q[1]);


--D3L9 is nBitRegister:AddressReg|Q[2]~111
D3L9 = D3_Q[2] & (D3L7 $ GND) # !D3_Q[2] & !D3L7 & VCC;

--D3L10 is nBitRegister:AddressReg|Q[2]~112
D3L10 = CARRY(D3_Q[2] & !D3L7);


--D3L12 is nBitRegister:AddressReg|Q[3]~113
D3L12 = D3_Q[3] & !D3L10 # !D3_Q[3] & (D3L10 # GND);

--D3L13 is nBitRegister:AddressReg|Q[3]~114
D3L13 = CARRY(!D3L10 # !D3_Q[3]);


--D3L15 is nBitRegister:AddressReg|Q[4]~115
D3L15 = D3_Q[4] & (D3L13 $ GND) # !D3_Q[4] & !D3L13 & VCC;

--D3L16 is nBitRegister:AddressReg|Q[4]~116
D3L16 = CARRY(D3_Q[4] & !D3L13);


--D3L18 is nBitRegister:AddressReg|Q[5]~117
D3L18 = D3_Q[5] & !D3L16 # !D3_Q[5] & (D3L16 # GND);

--D3L19 is nBitRegister:AddressReg|Q[5]~118
D3L19 = CARRY(!D3L16 # !D3_Q[5]);


--D3L21 is nBitRegister:AddressReg|Q[6]~119
D3L21 = D3_Q[6] $ !D3L19;


--D1L3 is nBitRegister:XOffsetReg|Q[0]~90
D1L3 = Q.INC_X & (D1_Q[0] $ VCC) # !Q.INC_X & D1_Q[0] & VCC;

--D1L4 is nBitRegister:XOffsetReg|Q[0]~91
D1L4 = CARRY(Q.INC_X & D1_Q[0]);


--D1L6 is nBitRegister:XOffsetReg|Q[1]~92
D1L6 = D1_Q[1] & !D1L4 # !D1_Q[1] & (D1L4 # GND);

--D1L7 is nBitRegister:XOffsetReg|Q[1]~93
D1L7 = CARRY(!D1L4 # !D1_Q[1]);


--D1L9 is nBitRegister:XOffsetReg|Q[2]~94
D1L9 = D1_Q[2] & (D1L7 $ GND) # !D1_Q[2] & !D1L7 & VCC;

--D1L10 is nBitRegister:XOffsetReg|Q[2]~95
D1L10 = CARRY(D1_Q[2] & !D1L7);


--D1L12 is nBitRegister:XOffsetReg|Q[3]~96
D1L12 = D1_Q[3] & !D1L10 # !D1_Q[3] & (D1L10 # GND);

--D1L13 is nBitRegister:XOffsetReg|Q[3]~97
D1L13 = CARRY(!D1L10 # !D1_Q[3]);


--D1L15 is nBitRegister:XOffsetReg|Q[4]~98
D1L15 = D1_Q[4] & (D1L13 $ GND) # !D1_Q[4] & !D1L13 & VCC;

--D1L16 is nBitRegister:XOffsetReg|Q[4]~99
D1L16 = CARRY(D1_Q[4] & !D1L13);


--D1L18 is nBitRegister:XOffsetReg|Q[5]~100
D1L18 = D1_Q[5] & !D1L16 # !D1_Q[5] & (D1L16 # GND);

--D1L19 is nBitRegister:XOffsetReg|Q[5]~101
D1L19 = CARRY(!D1L16 # !D1_Q[5]);


--D1L21 is nBitRegister:XOffsetReg|Q[6]~102
D1L21 = D1_Q[6] & (D1L19 $ GND) # !D1_Q[6] & !D1L19 & VCC;

--D1L22 is nBitRegister:XOffsetReg|Q[6]~103
D1L22 = CARRY(D1_Q[6] & !D1L19);


--D1L24 is nBitRegister:XOffsetReg|Q[7]~104
D1L24 = D1_Q[7] $ D1L22;


--D2L3 is nBitRegister:YOffsetReg|Q[0]~77
D2L3 = Q.INC_Y & (D2_Q[0] $ VCC) # !Q.INC_Y & D2_Q[0] & VCC;

--D2L4 is nBitRegister:YOffsetReg|Q[0]~78
D2L4 = CARRY(Q.INC_Y & D2_Q[0]);


--D2L6 is nBitRegister:YOffsetReg|Q[1]~79
D2L6 = D2_Q[1] & !D2L4 # !D2_Q[1] & (D2L4 # GND);

--D2L7 is nBitRegister:YOffsetReg|Q[1]~80
D2L7 = CARRY(!D2L4 # !D2_Q[1]);


--D2L9 is nBitRegister:YOffsetReg|Q[2]~81
D2L9 = D2_Q[2] & (D2L7 $ GND) # !D2_Q[2] & !D2L7 & VCC;

--D2L10 is nBitRegister:YOffsetReg|Q[2]~82
D2L10 = CARRY(D2_Q[2] & !D2L7);


--D2L12 is nBitRegister:YOffsetReg|Q[3]~83
D2L12 = D2_Q[3] & !D2L10 # !D2_Q[3] & (D2L10 # GND);

--D2L13 is nBitRegister:YOffsetReg|Q[3]~84
D2L13 = CARRY(!D2L10 # !D2_Q[3]);


--D2L15 is nBitRegister:YOffsetReg|Q[4]~85
D2L15 = D2_Q[4] & (D2L13 $ GND) # !D2_Q[4] & !D2L13 & VCC;

--D2L16 is nBitRegister:YOffsetReg|Q[4]~86
D2L16 = CARRY(D2_Q[4] & !D2L13);


--D2L18 is nBitRegister:YOffsetReg|Q[5]~87
D2L18 = D2_Q[5] & !D2L16 # !D2_Q[5] & (D2L16 # GND);

--D2L19 is nBitRegister:YOffsetReg|Q[5]~88
D2L19 = CARRY(!D2L16 # !D2_Q[5]);


--D2L21 is nBitRegister:YOffsetReg|Q[6]~89
D2L21 = D2_Q[6] $ !D2L19;


--Address[0] is Address[0]
Address[0] = OUTPUT(D3_Q[0]);


--Address[1] is Address[1]
Address[1] = OUTPUT(D3_Q[1]);


--Address[2] is Address[2]
Address[2] = OUTPUT(D3_Q[2]);


--Address[3] is Address[3]
Address[3] = OUTPUT(D3_Q[3]);


--Address[4] is Address[4]
Address[4] = OUTPUT(D3_Q[4]);


--Address[5] is Address[5]
Address[5] = OUTPUT(D3_Q[5]);


--Address[6] is Address[6]
Address[6] = OUTPUT(G1L1);


--Address[7] is Address[7]
Address[7] = OUTPUT(G1L3);


--Address[8] is Address[8]
Address[8] = OUTPUT(G1L5);


--Address[9] is Address[9]
Address[9] = OUTPUT(G1L7);


--X[0] is X[0]
X[0] = OUTPUT(J2L1);


--X[1] is X[1]
X[1] = OUTPUT(J2L3);


--X[2] is X[2]
X[2] = OUTPUT(J2L5);


--X[3] is X[3]
X[3] = OUTPUT(J2L7);


--X[4] is X[4]
X[4] = OUTPUT(J2L9);


--X[5] is X[5]
X[5] = OUTPUT(J2L11);


--X[6] is X[6]
X[6] = OUTPUT(J2L13);


--X[7] is X[7]
X[7] = OUTPUT(J2L15);


--Y[0] is Y[0]
Y[0] = OUTPUT(H2L1);


--Y[1] is Y[1]
Y[1] = OUTPUT(H2L3);


--Y[2] is Y[2]
Y[2] = OUTPUT(H2L5);


--Y[3] is Y[3]
Y[3] = OUTPUT(H2L7);


--Y[4] is Y[4]
Y[4] = OUTPUT(H2L9);


--Y[5] is Y[5]
Y[5] = OUTPUT(H2L11);


--Y[6] is Y[6]
Y[6] = OUTPUT(H2L13);


--Color[0] is Color[0]
Color[0] = OUTPUT(DataIn[0]);


--Color[1] is Color[1]
Color[1] = OUTPUT(DataIn[1]);


--Color[2] is Color[2]
Color[2] = OUTPUT(DataIn[2]);


--Color[3] is Color[3]
Color[3] = OUTPUT(DataIn[3]);


--Color[4] is Color[4]
Color[4] = OUTPUT(DataIn[4]);


--Color[5] is Color[5]
Color[5] = OUTPUT(DataIn[5]);


--Color[6] is Color[6]
Color[6] = OUTPUT(DataIn[6]);


--Color[7] is Color[7]
Color[7] = OUTPUT(DataIn[7]);


--Color[8] is Color[8]
Color[8] = OUTPUT(DataIn[8]);


--VGA_Draw is VGA_Draw
VGA_Draw = OUTPUT(Q.DRAW);


--Done is Done
Done = OUTPUT(Q.IDLE);


--TileSel[0] is TileSel[0]
TileSel[0] = INPUT();


--TileSel[1] is TileSel[1]
TileSel[1] = INPUT();


--TileSel[2] is TileSel[2]
TileSel[2] = INPUT();


--TileSel[3] is TileSel[3]
TileSel[3] = INPUT();


--Xin[0] is Xin[0]
Xin[0] = INPUT();


--Xin[1] is Xin[1]
Xin[1] = INPUT();


--Xin[2] is Xin[2]
Xin[2] = INPUT();


--Xin[3] is Xin[3]
Xin[3] = INPUT();


--Xin[4] is Xin[4]
Xin[4] = INPUT();


--Xin[5] is Xin[5]
Xin[5] = INPUT();


--Xin[6] is Xin[6]
Xin[6] = INPUT();


--Xin[7] is Xin[7]
Xin[7] = INPUT();


--Yin[0] is Yin[0]
Yin[0] = INPUT();


--Yin[1] is Yin[1]
Yin[1] = INPUT();


--Yin[2] is Yin[2]
Yin[2] = INPUT();


--Yin[3] is Yin[3]
Yin[3] = INPUT();


--Yin[4] is Yin[4]
Yin[4] = INPUT();


--Yin[5] is Yin[5]
Yin[5] = INPUT();


--Yin[6] is Yin[6]
Yin[6] = INPUT();


--DataIn[0] is DataIn[0]
DataIn[0] = INPUT();


--DataIn[1] is DataIn[1]
DataIn[1] = INPUT();


--DataIn[2] is DataIn[2]
DataIn[2] = INPUT();


--DataIn[3] is DataIn[3]
DataIn[3] = INPUT();


--DataIn[4] is DataIn[4]
DataIn[4] = INPUT();


--DataIn[5] is DataIn[5]
DataIn[5] = INPUT();


--DataIn[6] is DataIn[6]
DataIn[6] = INPUT();


--DataIn[7] is DataIn[7]
DataIn[7] = INPUT();


--DataIn[8] is DataIn[8]
DataIn[8] = INPUT();


--Q.DRAW is Q.DRAW
Q.DRAW = DFFEAS(A1L48, Clock,  ,  ,  ,  ,  ,  ,  );


--Q.IDLE is Q.IDLE
Q.IDLE = DFFEAS(A1L49, Clock,  ,  ,  ,  ,  ,  ,  );


--Clock is Clock
Clock = INPUT();


--Q.INC_Y is Q.INC_Y
Q.INC_Y = DFFEAS(A1L50, Clock,  ,  ,  ,  ,  ,  ,  );


--Q.INC_X is Q.INC_X
Q.INC_X = DFFEAS(A1L51, Clock,  ,  ,  ,  ,  ,  ,  );


--EnableMemCounter is EnableMemCounter
EnableMemCounter = Q.INC_Y # Q.INC_X;


--Q.000 is Q.000
Q.000 = DFFEAS(Resetn, Clock,  ,  ,  ,  ,  ,  ,  );


--A1L53 is ResetY~0
A1L53 = Q.IDLE # !Q.000;


--A1L52 is ResetX~0
A1L52 = !Q.DRAW & !Q.INC_X;


--Resetn is Resetn
Resetn = INPUT();


--A1L48 is Q~67
A1L48 = D.DRAW & Resetn;


--A1L49 is Q~68
A1L49 = Resetn & D.IDLE;


--A1L50 is Q~69
A1L50 = Resetn & D.INC_Y;


--A1L51 is Q~70
A1L51 = Resetn & D.INC_X;


--Enable is Enable
Enable = INPUT();


--D.DRAW is D.DRAW
D.DRAW = LCELL(Q.INC_Y # Q.INC_X # Q.IDLE & Enable);


--A1L55 is Selector0~28
A1L55 = Q.IDLE & !Enable # !Q.000;


--A1L40 is Equal1~113
A1L40 = D1_Q[0] & D1_Q[1] & D1_Q[2] & !D1_Q[3];


--A1L41 is Equal1~114
A1L41 = !D1_Q[4] & !D1_Q[5] & !D1_Q[6] & !D1_Q[7];


--A1L42 is Equal1~115
A1L42 = A1L40 & A1L41;


--A1L96 is always1~85
A1L96 = !D3_Q[3] # !D3_Q[2] # !D3_Q[1] # !D3_Q[0];


--A1L97 is always1~86
A1L97 = D3_Q[6] # A1L96 # !D3_Q[5] # !D3_Q[4];


--D.IDLE is D.IDLE
D.IDLE = LCELL(A1L55 # Q.DRAW & A1L42 & !A1L97);


--D.INC_X is D.INC_X
D.INC_X = LCELL(Q.DRAW & (!A1L41 # !A1L40));


--D.INC_Y is D.INC_Y
D.INC_Y = LCELL(A1L40 & A1L41 & Q.DRAW & A1L97);


